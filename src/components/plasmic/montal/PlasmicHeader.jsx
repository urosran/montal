// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pcFNE46rGqnuDWuZHtCFTE
// Component: pWNh6TZJnoM1
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsmOKod1Jttq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: mO_KOD1Jttq_/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_montal.module.css"; // plasmic-import: pcFNE46rGqnuDWuZHtCFTE/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: pWNh6TZJnoM1/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: TiU0_2HRXfm9/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: ss7rg0nl6s2W/icon
import UsersvgIcon from "./icons/PlasmicIcon__Usersvg"; // plasmic-import: hmu6daB5eiTB/icon
import CartsvgIcon from "./icons/PlasmicIcon__Cartsvg"; // plasmic-import: JC5u_PRD_j-Y/icon
import swissCheese575542640PngWJvvM9X24Vhp from "./images/swissCheese575542640Png.png"; // plasmic-import: WJvvM9x24VHP/picture

createPlasmicElementProxy;

export const PlasmicHeader__VariantProps = new Array();

export const PlasmicHeader__ArgProps = new Array();

const $$ = {};

function PlasmicHeader__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsmOKod1Jttq()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__kzvq)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ciNuJ)}
          >
            <p.Stack
              as={"a"}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__a2ZSi
              )}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__z78IB)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__m9Kcs
                )}
              >
                {"Home"}
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__r8GT6)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
            <p.Stack
              as={"a"}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__vcFMx
              )}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__aQjbi)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uZfP
                )}
              >
                {"Catalog"}
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___2DFj4)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          </p.Stack>
        </div>
        <div className={classNames(projectcss.all, sty.column__ql851)}>
          <a
            className={classNames(projectcss.all, projectcss.a, sty.link__xBhe)}
            href={`/`}
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"89px"}
              src={{
                src: swissCheese575542640PngWJvvM9X24Vhp,
                fullWidth: 640,
                fullHeight: 532,
                aspectRatio: undefined
              }}
            />
          </a>
        </div>
        <div className={classNames(projectcss.all, sty.column__esr8F)}>
          <div className={classNames(projectcss.all, sty.freeBox___01KVs)}>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__gs3XC
              )}
              href={"#"}
            >
              <SearchsvgIcon
                className={classNames(projectcss.all, sty.svg__ocoah)}
                role={"img"}
              />
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__zcqAf
              )}
              href={"#"}
            >
              <UsersvgIcon
                className={classNames(projectcss.all, sty.svg__fQkD)}
                role={"img"}
              />
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__u5IN
              )}
              href={"#"}
            >
              <CartsvgIcon
                className={classNames(projectcss.all, sty.svg___8ZqA)}
                role={"img"}
              />
            </a>
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns", "img"],
  columns: ["columns", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
